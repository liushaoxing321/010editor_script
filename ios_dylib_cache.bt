//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: parse /System/Library/Caches/com.apple.dyld/dyld_shared_cache_*  in iOS
//                 and /var/db/dyld/dyld_shared_cache_* in macOS.
//   Authors: lichao26
//   Version: 1.1
//   Purpose: parse ios symbol cache
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//      1.1   2017-03-17 feicong: add support for macOS.
//      1.0   2017-03-16 lichao26: Initial release.
//------------------------------------------------
#define MH_MAGIC_64 0xfeedfacf /* the 64-bit mach magic number */
#define MH_CIGAM_64 0xcffaedfe /* NXSwapInt(MH_MAGIC_64) */
#define MH_MAGIC    0xfeedface      /* the mach magic number */
#define MH_CIGAM    0xcefaedfe      /* NXSwapInt(MH_MAGIC) */

typedef struct  
{
    union 
    {
        char n_name[4];   /* for use when in-core */
        uint32 n_strx;	/* index into the string table */
    } n_un;
    uchar n_type;         /* type flag, see below */
    uchar n_sect;         /* section number or NO_SECT */
    int16 n_desc;         /* see <mach-o/stab.h> */
    uint32 n_value;       /* value of this symbol (or stab offset) */
} nlist;

/*
 * This is the symbol table entry structure for 64-bit architectures.
 */
typedef struct  
{
    union 
    {
        uint32  n_strx; /* index into the string table */
    } n_un;
    uchar n_type;        /* type flag, see below */
    uchar n_sect;        /* section number or NO_SECT */
    uint16 n_desc;       /* see <mach-o/stab.h> */
    uint64 n_value;      /* value of this symbol (or stab offset) */
} nlist_64;

typedef struct 
{
    char      magic[16];                        // e.g. "dyld_v0     ppc"
    uint32    mappingOffset <format=hex>;          // file offset to first dyld_cache_mapping_info
    uint32    mappingCount;                        // number of dyld_cache_mapping_info entries
    uint32    imagesOffset <format=hex>;           // file offset to first dyld_cache_image_info
    uint32    imagesCount;                         // number of dyld_cache_image_info entries
    uint64    dyldBaseAddress <format=hex>;        // base address of dyld when cache was built
    uint64    codeSignatureOffset <format=hex>;    // file offset in of code signature blob
    uint64    codeSignatureSize;                   // size of code signature blob (zero means to end of file)
    uint64    slideInfoOffset <format=hex>;        // file offset of kernel slide info
    uint64    slideInfoSize;                       // size of kernel slide info
    uint64    localSymbolsOffset <format=hex>;     // file offset of where local symbols are stored
    uint64    localSymbolsSize;                    // size of local symbols information
    uchar     uuid[16];                            // unique value for each shared cache file
    uint64    cacheType;                           // 1 for development, 0 for optimized
    uint32    islandsOffset <format=hex>;
    uint32    islandsCount;
    uint32    field_78;
    uint32    field_7C;
    uint64    field_80;
    uint64    field_88;
} dyld_cache_header;


typedef struct 
{
    uint64    address;
    uint64    size;
    uint64    fileOffset;
    uint32    maxProt;
    uint32    initProt;
} dyld_cache_mapping_info;

typedef struct 
{
    uint64    address;
    uint64    modTime;
    uint64    inode;
    uint32    pathFileOffset;
    uint32    pad;
}dyld_cache_image_info<read=readimagename>;

string readimagename(dyld_cache_image_info& info)
{
	return ReadString(info.pathFileOffset);
}


typedef struct
{
    local uint64 base = FTell();
    uint32    version;        // currently 1
    uint32    toc_offset <format=hex>;
    uint32    toc_count;
    uint32    entries_offset <format=hex>;
    uint32    entries_count;
    uint32    entries_size;  // currently 128
    FSeek(base + toc_offset);
    uint16    toc[toc_count];
    FSeek(base + entries_offset);
    uchar     entries[entries_count * entries_size];
} dyld_cache_slide_info;

void get_dyld_cache_slide_info(uint64 totalsize)
{
    dyld_cache_slide_info slideinfo;
}

char[] showstring64(nlist_64& list)
{
    return ReadString(strtableoff + list.n_un.n_strx);

}

char[] showstring(nlist& list)
{
    return ReadString(strtableoff + list.n_un.n_strx);
}

void readliststring()
{
    if(isbit64)
    {
        nlist_64 nlists<read=showstring64>;
    }
    else
    {
        nlist nlists<read=showstring>;
    }
}

typedef struct 
{
    uint32    dylibOffset;        // offset in cache file of start of dylib
    uint32    nlistStartIndex;    // start index of locals for this dylib
    uint32    nlistCount;         // number of local symbols for this dylib
} dyld_cache_local_symbols_entry;

typedef struct(uint count)
{
    for(i = 0;i < count;i++)
    {
        readliststring();
    }
} allnlist;

typedef struct 
{
    local uint64 base = FTell();
    local uint i;
    uint32    nlistOffset;        // offset into this chunk of nlist entries
    uint32    nlistCount;         // count of nlist entries
    uint32    stringsOffset;      // offset into this chunk of string pool
    uint32    stringsSize;        // byte count of string pool
    uint32    entriesOffset;      // offset into this chunk of array of dyld_cache_local_symbols_entry
    uint32    entriesCount;       // number of elements in dyld_cache_local_symbols_entry array
    FSeek(base + nlistOffset);
    strtableoff = base + stringsOffset;
    allnlist lists(nlistCount);
    FSeek(base + entriesOffset);
    dyld_cache_local_symbols_entry nlistentry[entriesCount];
} dyld_cache_local_symbols_info;

void get_dyld_cache_local_symbols_info(uint64 totalsize)
{
    dyld_cache_local_symbols_info symbolinfo;
}

void get_dyld_cache_local_symbols_entry(uint64 totalsize)
{
    
}
local int isbit64 = 0;
local uint32 i;
local uint32 sig;
local uint64 strtableoff;
dyld_cache_header header;
FSeek(header.mappingOffset);
dyld_cache_mapping_info mapinfo[header.mappingCount];
for(i = 0;i < header.mappingCount;i++)
{
    sig = ReadUInt(mapinfo[i].fileOffset);
    if(sig == MH_MAGIC_64 || sig == MH_CIGAM_64)
    {
        isbit64 = 1;
    }
}
FSeek(header.imagesOffset);
dyld_cache_image_info imageinfo[header.imagesCount];
FSeek(header.codeSignatureOffset);
if (header.codeSignatureSize > 0) {
    uchar sign[header.codeSignatureSize];
}
if (header.slideInfoOffset > 0) {
    FSeek(header.slideInfoOffset);
    get_dyld_cache_slide_info(header.slideInfoSize);
}
if (header.localSymbolsOffset > 0) {
    FSeek(header.localSymbolsOffset);
    get_dyld_cache_local_symbols_info(header.localSymbolsSize);
}